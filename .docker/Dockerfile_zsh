ARG ROSDISTRO=noetic

FROM ros:$ROSDISTRO-robot

ARG ROSDISTRO

# Set environment variables
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV DEBIAN_FRONTEND=noninteractive
ENV TERM xterm-256color

RUN apt-get update && apt-get install --no-install-recommends -y \
    zsh \
    ssh \
    git \
    curl \
    python3-pip \
    python3-flake8 \
    build-essential \
    cmake 

RUN pip3 install -U --no-cache-dir\
    catkin_tools \
    argcomplete \
    flake8-blind-except \
    flake8-builtins \
    flake8-class-newline \
    flake8-comprehensions \
    flake8-deprecated \
    flake8-return \
    flake8-length \
    flake8-todo \
    flake8-quotes \
    autopep8

# ROS
RUN apt-get update && apt-get install --no-install-recommends -y \
    pkg-config \
    python3-catkin-tools \
    python3-rosdep \
    python3-rosinstall-generator \
    python3-vcstool \
    ros-$ROSDISTRO-rqt \
    ros-$ROSDISTRO-rqt-action \
    ros-$ROSDISTRO-rqt-console \
    ros-$ROSDISTRO-rqt-service-caller \
    ros-$ROSDISTRO-rqt-graph \
    ros-$ROSDISTRO-rqt-topic \
    ros-$ROSDISTRO-rqt-top \
    ros-$ROSDISTRO-rqt-reconfigure \
    ros-$ROSDISTRO-rqt-tf-tree \
    ros-$ROSDISTRO-ros-tutorials

RUN ["/bin/bash", "-c", "rm -rf /var/lib/apt/lists/*"]

# Create workspace
RUN mkdir -p dev_ws/src
WORKDIR /dev_ws/src
# Copy local pkg's from host to container
COPY . /dev_ws/src/

# Set shell to zsh
SHELL ["zsh", "chsh -s ~/.zshrc" ]

# Copy and make setup script executable
COPY .docker/setup.zsh /dev_ws/setup.zsh
RUN ["/bin/bash", "-c", " chmod 777 /dev_ws/setup.zsh"]

# Copy and make entrypoint script executable
COPY .docker/entrypoint_zsh.sh /entrypoint_zsh.sh
RUN ["/bin/bash", "-c", "chmod 777 /entrypoint_zsh.sh"]
ENTRYPOINT ["zsh", "/entrypoint_zsh.sh" ]

# start ZSH shell
CMD ["zsh"]